/* 两数之和
Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,
Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
*/

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> v;
        v = nums;
        sort(v.begin(), v.end());
       
        int i = 0, n = nums.size();
        int j = n - 1;
        while(i < j) {
            int sum = v[i] + v[j];
            if(sum > target)
                --j;
            else if(sum < target)
                ++i;
            else
                break; 
        }
        
        vector<int> res;
        for(int k = 0; k < n; ++k) {
            if(i < n && nums[k] == v[i]) {
              res.push_back(k);
              i = n;
            }
            else if(j < n && nums[k] == v[j]) {
              res.push_back(k);
              j = n;
            }
            if(i == n && j == n)
                return res;
        }
        return res;
    }
};
